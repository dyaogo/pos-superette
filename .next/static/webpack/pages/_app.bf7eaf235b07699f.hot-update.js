"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./src/contexts/AppContext.jsx":
/*!*************************************!*\
  !*** ./src/contexts/AppContext.jsx ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppProvider: () => (/* binding */ AppProvider),\n/* harmony export */   useApp: () => (/* binding */ useApp)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst AppContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nfunction AppProvider(param) {\n    let { children } = param;\n    _s();\n    const [stores, setStores] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentStore, setCurrentStore] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [productCatalog, setProductCatalog] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [salesHistory, setSalesHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [customers, setCustomers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [credits, setCredits] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]); // NOUVEAU\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [initialized, setInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false); // NOUVEAU\n    // Initialisation au démarrage - AVEC PROTECTION\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppProvider.useEffect\": ()=>{\n            if (!initialized) {\n                initializeApp();\n                setInitialized(true);\n            }\n        }\n    }[\"AppProvider.useEffect\"], [\n        initialized\n    ]); // MODIFIÉ\n    const initializeApp = async ()=>{\n        setLoading(true);\n        try {\n            // 1. Charger les magasins\n            const storesRes = await fetch('/api/stores');\n            const storesData = await storesRes.json();\n            setStores(storesData);\n            // 2. Définir le magasin actif\n            let activeStore = null;\n            if (true) {\n                const savedStoreId = localStorage.getItem('currentStoreId');\n                activeStore = savedStoreId ? storesData.find((s)=>s.id === savedStoreId) : storesData[0];\n            } else {}\n            if (activeStore) {\n                setCurrentStore(activeStore);\n            }\n            // 3. Charger les autres données\n            await loadData();\n        } catch (error) {\n            console.error('Erreur initialisation:', error);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const loadData = async ()=>{\n        try {\n            // PARALLÉLISER tous les appels au lieu de les faire séquentiellement\n            const [storesRes, productsRes, salesRes, customersRes, creditsRes] = await Promise.all([\n                fetch('/api/stores'),\n                fetch('/api/products'),\n                fetch('/api/sales'),\n                fetch('/api/customers'),\n                fetch('/api/credits')\n            ]);\n            // Traiter les réponses\n            const [storesData, productsData, salesData, customersData, creditsData] = await Promise.all([\n                storesRes.json(),\n                productsRes.json(),\n                salesRes.json(),\n                customersRes.json(),\n                creditsRes.json()\n            ]);\n            // Mettre à jour les états\n            setStores(storesData);\n            // Si currentStore existe, le mettre à jour avec les nouvelles données\n            if (currentStore) {\n                const updatedCurrentStore = storesData.find((s)=>s.id === currentStore.id);\n                if (updatedCurrentStore) {\n                    setCurrentStore(updatedCurrentStore);\n                }\n            }\n            // Trier les produits\n            const sortedProducts = productsData.sort((a, b)=>a.name.localeCompare(b.name));\n            setProductCatalog(sortedProducts);\n            setSalesHistory(salesData);\n            setCustomers(customersData);\n            setCredits(creditsData);\n        } catch (error) {\n            console.error('Erreur chargement données:', error);\n        }\n    };\n    // Changer de magasin - OPTIMISÉ\n    const changeStore = async (store)=>{\n        if ((currentStore === null || currentStore === void 0 ? void 0 : currentStore.id) === store.id) return; // NOUVEAU - Ne rien faire si c'est le même\n        setCurrentStore(store);\n        if (true) {\n            localStorage.setItem('currentStoreId', store.id);\n        }\n        await loadData();\n    };\n    // ✨ NOUVELLES FONCTIONS DE MISE À JOUR OPTIMISTE\n    // Mettre à jour un store sans tout recharger\n    const updateStoreOptimistic = (storeId, updatedData)=>{\n        setStores((prev)=>prev.map((s)=>s.id === storeId ? {\n                    ...s,\n                    ...updatedData\n                } : s));\n        // Si c'est le store actif, le mettre à jour aussi\n        if ((currentStore === null || currentStore === void 0 ? void 0 : currentStore.id) === storeId) {\n            setCurrentStore((prev)=>({\n                    ...prev,\n                    ...updatedData\n                }));\n        }\n    };\n    // Ajouter un store sans tout recharger\n    const addStoreOptimistic = (newStore)=>{\n        setStores((prev)=>[\n                ...prev,\n                newStore\n            ]);\n    };\n    // Supprimer un store sans tout recharger\n    const deleteStoreOptimistic = (storeId)=>{\n        setStores((prev)=>prev.filter((s)=>s.id !== storeId));\n    };\n    // Mettre à jour un produit sans tout recharger\n    const updateProductOptimistic = (productId, updatedData)=>{\n        setProductCatalog((prev)=>prev.map((p)=>p.id === productId ? {\n                    ...p,\n                    ...updatedData\n                } : p).sort((a, b)=>a.name.localeCompare(b.name)));\n    };\n    // Ajouter une vente sans tout recharger\n    const addSaleOptimistic = (newSale)=>{\n        setSalesHistory((prev)=>[\n                newSale,\n                ...prev\n            ]);\n    };\n    // Mettre à jour le stock d'un produit après vente\n    const updateProductStockOptimistic = (productId, quantitySold)=>{\n        setProductCatalog((prev)=>prev.map((p)=>p.id === productId ? {\n                    ...p,\n                    stock: Math.max(0, p.stock - quantitySold)\n                } : p).sort((a, b)=>a.name.localeCompare(b.name)));\n    };\n    // Mettre à jour plusieurs stocks en une fois\n    const updateMultipleProductStocksOptimistic = (stockUpdates)=>{\n        // stockUpdates = [{productId, quantitySold}, ...]\n        setProductCatalog((prev)=>{\n            const updated = prev.map((p)=>{\n                const update = stockUpdates.find((u)=>u.productId === p.id);\n                if (update) {\n                    return {\n                        ...p,\n                        stock: Math.max(0, p.stock - update.quantitySold)\n                    };\n                }\n                return p;\n            });\n            return updated.sort((a, b)=>a.name.localeCompare(b.name));\n        });\n    };\n    // Ajouter un crédit sans tout recharger\n    const addCreditOptimistic = (newCredit)=>{\n        setCredits((prev)=>[\n                newCredit,\n                ...prev\n            ]);\n    };\n    // Mettre à jour un crédit sans tout recharger\n    const updateCreditOptimistic = (creditId, updatedData)=>{\n        setCredits((prev)=>prev.map((c)=>c.id === creditId ? {\n                    ...c,\n                    ...updatedData\n                } : c));\n    };\n    // Filtrer par magasin actif\n    const currentStoreProducts = productCatalog.filter((p)=>!currentStore || p.storeId === currentStore.id);\n    const currentStoreSales = salesHistory.filter((s)=>!currentStore || s.storeId === currentStore.id);\n    // Actions produits\n    const addProduct = async (productData)=>{\n        try {\n            const res = await fetch('/api/products', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    ...productData,\n                    storeId: currentStore === null || currentStore === void 0 ? void 0 : currentStore.id\n                })\n            });\n            if (res.ok) {\n                await loadData();\n                return {\n                    success: true\n                };\n            }\n            return {\n                success: false\n            };\n        } catch (error) {\n            console.error('Erreur ajout produit:', error);\n            return {\n                success: false\n            };\n        }\n    };\n    const updateProduct = async (id, productData)=>{\n        try {\n            const res = await fetch(\"/api/products/\".concat(id), {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(productData)\n            });\n            if (res.ok) {\n                await loadData();\n                return {\n                    success: true\n                };\n            }\n            return {\n                success: false\n            };\n        } catch (error) {\n            return {\n                success: false\n            };\n        }\n    };\n    const deleteProduct = async (id)=>{\n        try {\n            const res = await fetch(\"/api/products/\".concat(id), {\n                method: 'DELETE'\n            });\n            if (res.ok) {\n                await loadData();\n                return {\n                    success: true\n                };\n            }\n            return {\n                success: false\n            };\n        } catch (error) {\n            return {\n                success: false\n            };\n        }\n    };\n    // Actions clients\n    const addCustomer = async (customerData)=>{\n        try {\n            const res = await fetch('/api/customers', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(customerData)\n            });\n            if (res.ok) {\n                await loadData();\n                return {\n                    success: true\n                };\n            }\n            return {\n                success: false\n            };\n        } catch (error) {\n            return {\n                success: false\n            };\n        }\n    };\n    const updateCustomer = async (id, customerData)=>{\n        try {\n            const res = await fetch(\"/api/customers/\".concat(id), {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(customerData)\n            });\n            if (res.ok) {\n                await loadData();\n                return {\n                    success: true\n                };\n            }\n            return {\n                success: false\n            };\n        } catch (error) {\n            return {\n                success: false\n            };\n        }\n    };\n    // NOUVEAU : Enregistrer une vente\n    const recordSale = async (saleData)=>{\n        try {\n            const res = await fetch('/api/sales', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    ...saleData,\n                    storeId: currentStore === null || currentStore === void 0 ? void 0 : currentStore.id\n                })\n            });\n            if (res.ok) {\n                const sale = await res.json(); // RÉCUPÉRER LA VENTE CRÉÉE\n                await loadData();\n                return {\n                    success: true,\n                    sale\n                }; // RETOURNER LA VENTE\n            }\n            return {\n                success: false\n            };\n        } catch (error) {\n            console.error('Erreur enregistrement vente:', error);\n            return {\n                success: false\n            };\n        }\n    };\n    // Mettre à jour le magasin actif\n    const updateCurrentStore = async (storeData)=>{\n        if (!currentStore) return {\n            success: false\n        };\n        try {\n            const res = await fetch(\"/api/stores/\".concat(currentStore.id), {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(storeData)\n            });\n            if (res.ok) {\n                const updatedStore = await res.json();\n                setCurrentStore(updatedStore);\n                // Mettre à jour aussi dans la liste\n                setStores((prev)=>prev.map((s)=>s.id === updatedStore.id ? updatedStore : s));\n                return {\n                    success: true\n                };\n            }\n            return {\n                success: false\n            };\n        } catch (error) {\n            return {\n                success: false\n            };\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AppContext.Provider, {\n        value: {\n            // Magasins\n            stores,\n            currentStore,\n            changeStore,\n            updateCurrentStore,\n            updateStoreOptimistic,\n            addStoreOptimistic,\n            deleteStoreOptimistic,\n            // Données filtrées par magasin\n            productCatalog: currentStoreProducts,\n            salesHistory: currentStoreSales,\n            customers,\n            credits,\n            // Données complètes (pour admin)\n            allProducts: productCatalog,\n            allSales: salesHistory,\n            // Actions\n            addProduct,\n            updateProduct,\n            deleteProduct,\n            updateProductOptimistic,\n            addSaleOptimistic,\n            addCustomer,\n            addCustomer,\n            updateCustomer,\n            recordSale,\n            // État\n            loading,\n            reloadData: loadData\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/denisyaogo/Documents/pos-superette/src/contexts/AppContext.jsx\",\n        lineNumber: 335,\n        columnNumber: 5\n    }, this);\n}\n_s(AppProvider, \"IwqlUrmy+cFUQmMuFTgREAHJzKY=\");\n_c = AppProvider;\nfunction useApp() {\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AppContext);\n}\n_s1(useApp, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/contexts/AppContext.jsx\n"));

/***/ })

});