generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  address   String?
  phone     String? 
  currency  String   @default("FCFA")
  taxRate   Float    @default(18)
  createdAt DateTime @default(now())
  
  products  Product[]
  sales     Sale[]
}

model Product {
  id           String   @id @default(cuid())
  storeId      String
  barcode      String?
  name         String
  category     String
  costPrice    Float
  sellingPrice Float
  stock        Int      @default(0)
  image        String?  @db.Text  // CHANGÉ - permet de stocker de grandes chaînes
  createdAt    DateTime @default(now())
  
  store        Store    @relation(fields: [storeId], references: [id])
}

model Sale {
  id            String   @id @default(cuid())
  storeId       String
  receiptNumber String   @unique
  total         Float
  subtotal      Float    @default(0)
  tax           Float    @default(0)
  discount      Float    @default(0)
  paymentMethod String
  cashReceived  Float?
  change        Float?
  customerId    String?
  cashier       String   @default("Admin")
  createdAt     DateTime @default(now())
  
  store         Store      @relation(fields: [storeId], references: [id])
  items         SaleItem[]
}

model SaleItem {
  id          String   @id @default(cuid())
  saleId      String
  productId   String
  productName String
  quantity    Int
  unitPrice   Float
  total       Float
  
  sale        Sale     @relation(fields: [saleId], references: [id])
}
model Customer {
  id        String   @id @default(cuid())
  name      String
  phone     String?
  email     String?
  createdAt DateTime @default(now())
}
model Credit {
  id              String   @id @default(cuid())
  customerId      String
  amount          Float
  remainingAmount Float
  description     String?
  dueDate         DateTime
  status          String   @default("pending") // pending, partial, paid
  createdAt       DateTime @default(now())
}
model Return {
  id          String   @id @default(cuid())
  saleId      String
  reason      String
  amount      Float
  refundMethod String  // cash, card, credit
  processedBy String   @default("Admin")
  createdAt   DateTime @default(now())
  items       ReturnItem[]
}

model ReturnItem {
  id          String   @id @default(cuid())
  returnId    String
  productId   String
  productName String
  quantity    Int
  unitPrice   Float
  total       Float
  
  return      Return   @relation(fields: [returnId], references: [id])
}

model InventorySession {
  id          String   @id @default(cuid())
  name        String
  type        String   @default("physical") // physical, cycle, spot
  status      String   @default("in_progress") // in_progress, completed, cancelled
  storeId     String?
  startedBy   String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  notes       String?
  
  counts      InventoryCount[]
  adjustments StockAdjustment[]
}

model InventoryCount {
  id          String   @id @default(cuid())
  sessionId   String
  productId   String
  expectedQty Int
  countedQty  Int
  difference  Int
  notes       String?
  countedAt   DateTime @default(now())
  countedBy   String?
  
  session     InventorySession @relation(fields: [sessionId], references: [id])
}

model StockAdjustment {
  id          String   @id @default(cuid())
  sessionId   String?
  productId   String
  quantity    Int
  reason      String
  type        String   // adjustment, restock, loss, transfer
  notes       String?
  createdAt   DateTime @default(now())
  createdBy   String?
  
  session     InventorySession? @relation(fields: [sessionId], references: [id])
}

model CashSession {
  id              String   @id @default(cuid())
  storeId         String
  sessionNumber   String   @unique
  openedAt        DateTime @default(now())
  closedAt        DateTime?
  openedBy        String
  closedBy        String?
  openingAmount   Float
  closingAmount   Float?
  expectedAmount  Float?
  difference      Float?
  status          String   @default("open") // open, closed
  notes           String?
  
  operations      CashOperation[]
  createdAt       DateTime @default(now())
}

model CashOperation {
  id          String   @id @default(cuid())
  sessionId   String
  type        String   // in, out
  amount      Float
  reason      String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  
  session     CashSession @relation(fields: [sessionId], references: [id])
}
model StockTransfer {
  id            String   @id @default(cuid())
  fromStoreId   String
  toStoreId     String
  productId     String
  productName   String
  quantity      Int
  status        String   @default("pending") // pending, completed, cancelled
  initiatedBy   String   @default("Admin")
  completedBy   String?
  notes         String?
  createdAt     DateTime @default(now())
  completedAt   DateTime?
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String   // Hashé avec bcrypt
  fullName      String
  role          String   @default("cashier") // admin, manager, cashier
  storeId       String?  // Magasin assigné (null = tous les magasins)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?
  createdBy     String?
  
  activityLogs  ActivityLog[]
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String   // login, logout, create_sale, delete_product, etc.
  entity      String?  // sale, product, user, etc.
  entityId    String?
  details     String?  @db.Text
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
}